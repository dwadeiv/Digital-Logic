|top
KEY[0] => KEY[0].IN1
KEY[1] => side_input.DATAA
SW[0] => hazard_input.DATAA
SW[1] => turn_signal_input.DATAA
SW[2] => ~NO_FANOUT~
SW[3] => ~NO_FANOUT~
SW[4] => ~NO_FANOUT~
SW[5] => ~NO_FANOUT~
SW[6] => ~NO_FANOUT~
SW[7] => ~NO_FANOUT~
SW[8] => ~NO_FANOUT~
SW[9] => hazard_input.OUTPUTSELECT
SW[9] => turn_signal_input.OUTPUTSELECT
SW[9] => side_input.OUTPUTSELECT
ADC_CLK_10 => ADC_CLK_10.IN1
LEDR[0] <= right_LED[0].DB_MAX_OUTPUT_PORT_TYPE
LEDR[1] <= right_LED[1].DB_MAX_OUTPUT_PORT_TYPE
LEDR[2] <= right_LED[2].DB_MAX_OUTPUT_PORT_TYPE
LEDR[3] <= <GND>
LEDR[4] <= <GND>
LEDR[5] <= <GND>
LEDR[6] <= <GND>
LEDR[7] <= left_LED[0].DB_MAX_OUTPUT_PORT_TYPE
LEDR[8] <= left_LED[1].DB_MAX_OUTPUT_PORT_TYPE
LEDR[9] <= left_LED[2].DB_MAX_OUTPUT_PORT_TYPE
HEX0[0] <= codeconverter:h0.out
HEX0[1] <= codeconverter:h0.out
HEX0[2] <= codeconverter:h0.out
HEX0[3] <= codeconverter:h0.out
HEX0[4] <= codeconverter:h0.out
HEX0[5] <= codeconverter:h0.out
HEX0[6] <= codeconverter:h0.out
HEX0[7] <= codeconverter:h0.out


|top|clock_divider:c
clk => slw_clk_2~reg0.CLK
clk => divider_2[0].CLK
clk => divider_2[1].CLK
clk => divider_2[2].CLK
clk => divider_2[3].CLK
clk => divider_2[4].CLK
clk => divider_2[5].CLK
clk => divider_2[6].CLK
clk => divider_2[7].CLK
clk => divider_2[8].CLK
clk => divider_2[9].CLK
clk => divider_2[10].CLK
clk => divider_2[11].CLK
clk => divider_2[12].CLK
clk => divider_2[13].CLK
clk => divider_2[14].CLK
clk => divider_2[15].CLK
clk => divider_2[16].CLK
clk => divider_2[17].CLK
clk => divider_2[18].CLK
clk => divider_2[19].CLK
clk => divider_2[20].CLK
clk => divider_2[21].CLK
clk => divider_2[22].CLK
clk => divider_2[23].CLK
clk => divider_2[24].CLK
clk => divider_2[25].CLK
clk => divider_2[26].CLK
clk => divider_2[27].CLK
clk => divider_2[28].CLK
clk => divider_2[29].CLK
clk => divider_2[30].CLK
clk => divider_2[31].CLK
clk => slw_clk_1~reg0.CLK
clk => divider_1[0].CLK
clk => divider_1[1].CLK
clk => divider_1[2].CLK
clk => divider_1[3].CLK
clk => divider_1[4].CLK
clk => divider_1[5].CLK
clk => divider_1[6].CLK
clk => divider_1[7].CLK
clk => divider_1[8].CLK
clk => divider_1[9].CLK
clk => divider_1[10].CLK
clk => divider_1[11].CLK
clk => divider_1[12].CLK
clk => divider_1[13].CLK
clk => divider_1[14].CLK
clk => divider_1[15].CLK
clk => divider_1[16].CLK
clk => divider_1[17].CLK
clk => divider_1[18].CLK
clk => divider_1[19].CLK
clk => divider_1[20].CLK
clk => divider_1[21].CLK
clk => divider_1[22].CLK
clk => divider_1[23].CLK
clk => divider_1[24].CLK
clk => divider_1[25].CLK
clk => divider_1[26].CLK
clk => divider_1[27].CLK
clk => divider_1[28].CLK
clk => divider_1[29].CLK
clk => divider_1[30].CLK
clk => divider_1[31].CLK
reset_n => divider_1[0].ACLR
reset_n => divider_1[1].ACLR
reset_n => divider_1[2].ACLR
reset_n => divider_1[3].ACLR
reset_n => divider_1[4].ACLR
reset_n => divider_1[5].ACLR
reset_n => divider_1[6].ACLR
reset_n => divider_1[7].ACLR
reset_n => divider_1[8].ACLR
reset_n => divider_1[9].ACLR
reset_n => divider_1[10].ACLR
reset_n => divider_1[11].ACLR
reset_n => divider_1[12].ACLR
reset_n => divider_1[13].ACLR
reset_n => divider_1[14].ACLR
reset_n => divider_1[15].ACLR
reset_n => divider_1[16].ACLR
reset_n => divider_1[17].ACLR
reset_n => divider_1[18].ACLR
reset_n => divider_1[19].ACLR
reset_n => divider_1[20].ACLR
reset_n => divider_1[21].ACLR
reset_n => divider_1[22].ACLR
reset_n => divider_1[23].ACLR
reset_n => divider_1[24].ACLR
reset_n => divider_1[25].ACLR
reset_n => divider_1[26].ACLR
reset_n => divider_1[27].ACLR
reset_n => divider_1[28].ACLR
reset_n => divider_1[29].ACLR
reset_n => divider_1[30].ACLR
reset_n => divider_1[31].ACLR
reset_n => divider_2[0].ACLR
reset_n => divider_2[1].ACLR
reset_n => divider_2[2].ACLR
reset_n => divider_2[3].ACLR
reset_n => divider_2[4].ACLR
reset_n => divider_2[5].ACLR
reset_n => divider_2[6].ACLR
reset_n => divider_2[7].ACLR
reset_n => divider_2[8].ACLR
reset_n => divider_2[9].ACLR
reset_n => divider_2[10].ACLR
reset_n => divider_2[11].ACLR
reset_n => divider_2[12].ACLR
reset_n => divider_2[13].ACLR
reset_n => divider_2[14].ACLR
reset_n => divider_2[15].ACLR
reset_n => divider_2[16].ACLR
reset_n => divider_2[17].ACLR
reset_n => divider_2[18].ACLR
reset_n => divider_2[19].ACLR
reset_n => divider_2[20].ACLR
reset_n => divider_2[21].ACLR
reset_n => divider_2[22].ACLR
reset_n => divider_2[23].ACLR
reset_n => divider_2[24].ACLR
reset_n => divider_2[25].ACLR
reset_n => divider_2[26].ACLR
reset_n => divider_2[27].ACLR
reset_n => divider_2[28].ACLR
reset_n => divider_2[29].ACLR
reset_n => divider_2[30].ACLR
reset_n => divider_2[31].ACLR
reset_n => slw_clk_2~reg0.ENA
reset_n => slw_clk_1~reg0.ENA
slw_clk_1 <= slw_clk_1~reg0.DB_MAX_OUTPUT_PORT_TYPE
slw_clk_2 <= slw_clk_2~reg0.DB_MAX_OUTPUT_PORT_TYPE


|top|m9k:mem1
address[0] => address[0].IN1
address[1] => address[1].IN1
address[2] => address[2].IN1
address[3] => address[3].IN1
address[4] => address[4].IN1
address[5] => address[5].IN1
address[6] => address[6].IN1
address[7] => address[7].IN1
clock => clock.IN1
q[0] <= altsyncram:altsyncram_component.q_a
q[1] <= altsyncram:altsyncram_component.q_a
q[2] <= altsyncram:altsyncram_component.q_a
q[3] <= altsyncram:altsyncram_component.q_a
q[4] <= altsyncram:altsyncram_component.q_a
q[5] <= altsyncram:altsyncram_component.q_a
q[6] <= altsyncram:altsyncram_component.q_a
q[7] <= altsyncram:altsyncram_component.q_a


|top|m9k:mem1|altsyncram:altsyncram_component
wren_a => ~NO_FANOUT~
rden_a => ~NO_FANOUT~
wren_b => ~NO_FANOUT~
rden_b => ~NO_FANOUT~
data_a[0] => ~NO_FANOUT~
data_a[1] => ~NO_FANOUT~
data_a[2] => ~NO_FANOUT~
data_a[3] => ~NO_FANOUT~
data_a[4] => ~NO_FANOUT~
data_a[5] => ~NO_FANOUT~
data_a[6] => ~NO_FANOUT~
data_a[7] => ~NO_FANOUT~
data_b[0] => ~NO_FANOUT~
address_a[0] => altsyncram_ppa1:auto_generated.address_a[0]
address_a[1] => altsyncram_ppa1:auto_generated.address_a[1]
address_a[2] => altsyncram_ppa1:auto_generated.address_a[2]
address_a[3] => altsyncram_ppa1:auto_generated.address_a[3]
address_a[4] => altsyncram_ppa1:auto_generated.address_a[4]
address_a[5] => altsyncram_ppa1:auto_generated.address_a[5]
address_a[6] => altsyncram_ppa1:auto_generated.address_a[6]
address_a[7] => altsyncram_ppa1:auto_generated.address_a[7]
address_b[0] => ~NO_FANOUT~
addressstall_a => ~NO_FANOUT~
addressstall_b => ~NO_FANOUT~
clock0 => altsyncram_ppa1:auto_generated.clock0
clock1 => ~NO_FANOUT~
clocken0 => ~NO_FANOUT~
clocken1 => ~NO_FANOUT~
clocken2 => ~NO_FANOUT~
clocken3 => ~NO_FANOUT~
aclr0 => ~NO_FANOUT~
aclr1 => ~NO_FANOUT~
byteena_a[0] => ~NO_FANOUT~
byteena_b[0] => ~NO_FANOUT~
q_a[0] <= altsyncram_ppa1:auto_generated.q_a[0]
q_a[1] <= altsyncram_ppa1:auto_generated.q_a[1]
q_a[2] <= altsyncram_ppa1:auto_generated.q_a[2]
q_a[3] <= altsyncram_ppa1:auto_generated.q_a[3]
q_a[4] <= altsyncram_ppa1:auto_generated.q_a[4]
q_a[5] <= altsyncram_ppa1:auto_generated.q_a[5]
q_a[6] <= altsyncram_ppa1:auto_generated.q_a[6]
q_a[7] <= altsyncram_ppa1:auto_generated.q_a[7]
q_b[0] <= <GND>
eccstatus[0] <= <GND>
eccstatus[1] <= <GND>
eccstatus[2] <= <GND>


|top|m9k:mem1|altsyncram:altsyncram_component|altsyncram_ppa1:auto_generated
address_a[0] => ram_block1a0.PORTAADDR
address_a[0] => ram_block1a1.PORTAADDR
address_a[0] => ram_block1a2.PORTAADDR
address_a[0] => ram_block1a3.PORTAADDR
address_a[0] => ram_block1a4.PORTAADDR
address_a[0] => ram_block1a5.PORTAADDR
address_a[0] => ram_block1a6.PORTAADDR
address_a[0] => ram_block1a7.PORTAADDR
address_a[1] => ram_block1a0.PORTAADDR1
address_a[1] => ram_block1a1.PORTAADDR1
address_a[1] => ram_block1a2.PORTAADDR1
address_a[1] => ram_block1a3.PORTAADDR1
address_a[1] => ram_block1a4.PORTAADDR1
address_a[1] => ram_block1a5.PORTAADDR1
address_a[1] => ram_block1a6.PORTAADDR1
address_a[1] => ram_block1a7.PORTAADDR1
address_a[2] => ram_block1a0.PORTAADDR2
address_a[2] => ram_block1a1.PORTAADDR2
address_a[2] => ram_block1a2.PORTAADDR2
address_a[2] => ram_block1a3.PORTAADDR2
address_a[2] => ram_block1a4.PORTAADDR2
address_a[2] => ram_block1a5.PORTAADDR2
address_a[2] => ram_block1a6.PORTAADDR2
address_a[2] => ram_block1a7.PORTAADDR2
address_a[3] => ram_block1a0.PORTAADDR3
address_a[3] => ram_block1a1.PORTAADDR3
address_a[3] => ram_block1a2.PORTAADDR3
address_a[3] => ram_block1a3.PORTAADDR3
address_a[3] => ram_block1a4.PORTAADDR3
address_a[3] => ram_block1a5.PORTAADDR3
address_a[3] => ram_block1a6.PORTAADDR3
address_a[3] => ram_block1a7.PORTAADDR3
address_a[4] => ram_block1a0.PORTAADDR4
address_a[4] => ram_block1a1.PORTAADDR4
address_a[4] => ram_block1a2.PORTAADDR4
address_a[4] => ram_block1a3.PORTAADDR4
address_a[4] => ram_block1a4.PORTAADDR4
address_a[4] => ram_block1a5.PORTAADDR4
address_a[4] => ram_block1a6.PORTAADDR4
address_a[4] => ram_block1a7.PORTAADDR4
address_a[5] => ram_block1a0.PORTAADDR5
address_a[5] => ram_block1a1.PORTAADDR5
address_a[5] => ram_block1a2.PORTAADDR5
address_a[5] => ram_block1a3.PORTAADDR5
address_a[5] => ram_block1a4.PORTAADDR5
address_a[5] => ram_block1a5.PORTAADDR5
address_a[5] => ram_block1a6.PORTAADDR5
address_a[5] => ram_block1a7.PORTAADDR5
address_a[6] => ram_block1a0.PORTAADDR6
address_a[6] => ram_block1a1.PORTAADDR6
address_a[6] => ram_block1a2.PORTAADDR6
address_a[6] => ram_block1a3.PORTAADDR6
address_a[6] => ram_block1a4.PORTAADDR6
address_a[6] => ram_block1a5.PORTAADDR6
address_a[6] => ram_block1a6.PORTAADDR6
address_a[6] => ram_block1a7.PORTAADDR6
address_a[7] => ram_block1a0.PORTAADDR7
address_a[7] => ram_block1a1.PORTAADDR7
address_a[7] => ram_block1a2.PORTAADDR7
address_a[7] => ram_block1a3.PORTAADDR7
address_a[7] => ram_block1a4.PORTAADDR7
address_a[7] => ram_block1a5.PORTAADDR7
address_a[7] => ram_block1a6.PORTAADDR7
address_a[7] => ram_block1a7.PORTAADDR7
clock0 => ram_block1a0.CLK0
clock0 => ram_block1a1.CLK0
clock0 => ram_block1a2.CLK0
clock0 => ram_block1a3.CLK0
clock0 => ram_block1a4.CLK0
clock0 => ram_block1a5.CLK0
clock0 => ram_block1a6.CLK0
clock0 => ram_block1a7.CLK0
q_a[0] <= ram_block1a0.PORTADATAOUT
q_a[1] <= ram_block1a1.PORTADATAOUT
q_a[2] <= ram_block1a2.PORTADATAOUT
q_a[3] <= ram_block1a3.PORTADATAOUT
q_a[4] <= ram_block1a4.PORTADATAOUT
q_a[5] <= ram_block1a5.PORTADATAOUT
q_a[6] <= ram_block1a6.PORTADATAOUT
q_a[7] <= ram_block1a7.PORTADATAOUT


|top|codeconverter:h0
num[0] => Decoder1.IN2
num[0] => Decoder2.IN1
num[1] => Decoder0.IN1
num[1] => Decoder1.IN1
num[2] => Decoder0.IN0
num[2] => Decoder1.IN0
num[2] => Decoder2.IN0
num[2] => out[1].DATAIN
out[0] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE
out[1] <= num[2].DB_MAX_OUTPUT_PORT_TYPE
out[2] <= WideOr1.DB_MAX_OUTPUT_PORT_TYPE
out[3] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE
out[4] <= Decoder2.DB_MAX_OUTPUT_PORT_TYPE
out[5] <= Decoder1.DB_MAX_OUTPUT_PORT_TYPE
out[6] <= Decoder0.DB_MAX_OUTPUT_PORT_TYPE
out[7] <= <VCC>


